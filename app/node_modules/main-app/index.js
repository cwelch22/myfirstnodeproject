'use strict';

var schema = require('service-schema');
var Validator = require('jsonschema').Validator;
var v = new Validator();

function init(app) {
	return schema.init().then(function() {
		Object.keys(schema.original).forEach(function(schemaName) {
			return schema.original[schemaName].links.forEach(function(link) {

				// if no href specified in link, then make it '/schemaName'
				var href = link.href || '/' + schemaName;

				if (link.method === 'POST') {
					app.route(href)
						.post(function(req, res) {
							processRequest(req, res, schemaName);
						});
				}

				if (link.method === 'GET') {
					app.route(href)
						.get(function(req, res) {
							processRequest(req, res, schemaName);
						});
				}

				if (link.method === 'PUT') {
					app.route(href)
						.put(function(req, res) {
							processRequest(req, res, schemaName);
						});
				}

				if (link.method === 'DELETE') {
					app.route(href)
						.delete(function(req, res) {
							processRequest(req, res, schemaName);
						});
				}
			});
		});
	});
};

function processRequest(req, res, schemaName) {
	var json;

	req.on('data', function(data) {
		json = JSON.parse(data.toString());
	});

	req.on('end', function() {
		var result = v.validate(json, schema.original[schemaName]);

		if (result.valid) {
			res.writeHead(200, {
				"Content-Type": "application/json"
			});

			var respObject = {};
			respObject[req.method] = json || 'SUCCESS';

			res.end(JSON.stringify(respObject));
		} else {
			res.writeHead(400, {
				"Content-Type": "application/json"
			});
			res.end(JSON.stringify({
				errorMsg: "Schema Validation Error",
				errors: result.errors.map(function(error) {
					return error.message;
				})
			}));
		}
	});
}

module.exports = {
	init: init
}
